// qinappstore.sip generated by MetaSIP
//
// This file is part of the QtPurchasing Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtPurchasing.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QInAppStore : QObject
{
%TypeHeaderCode
#include <qinappstore.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QInAppProduct, &sipType_QInAppProduct, -1, 1},
        {sipName_QInAppStore, &sipType_QInAppStore, -1, 2},
        {sipName_QInAppTransaction, &sipType_QInAppTransaction, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
%If (QtPurchasing_5_7_0 -)
    explicit QInAppStore(QObject *parent /TransferThis/ = 0);
%End
%If (- QtPurchasing_5_7_0)
    QInAppStore(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QInAppStore();
    void restorePurchases();
    void registerProduct(QInAppProduct::ProductType productType, const QString &identifier);
    QInAppProduct *registeredProduct(const QString &identifier) const;
    void setPlatformProperty(const QString &propertyName, const QString &value);

signals:
    void productRegistered(QInAppProduct *product);
    void productUnknown(QInAppProduct::ProductType productType, const QString &identifier);
    void transactionReady(QInAppTransaction *transaction);
};

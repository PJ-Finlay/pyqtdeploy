// qscenechange.sip generated by MetaSIP
//
// This file is part of the Qt3DCore Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DCore
{
%TypeHeaderCode
#include <qscenechange.h>
%End

    enum ChangeFlag
    {
        NodeCreated,
        NodeDeleted,
        PropertyUpdated,
        PropertyValueAdded,
        PropertyValueRemoved,
        ComponentAdded,
        ComponentRemoved,
%If (Qt3D_5_10_0 -)
        CommandRequested,
%End
%If (Qt3D_5_10_0 -)
        CallbackTriggered,
%End
        AllChanges,
    };

    typedef QFlags<Qt3DCore::ChangeFlag> ChangeFlags;
    QFlags<Qt3DCore::ChangeFlag> operator|(Qt3DCore::ChangeFlag f1, QFlags<Qt3DCore::ChangeFlag> f2);

    class QSceneChange
    {
%TypeHeaderCode
#include <qscenechange.h>
%End

    public:
        enum DeliveryFlag
        {
            BackendNodes,
            Nodes,
            DeliverToAll,
        };

        typedef QFlags<Qt3DCore::QSceneChange::DeliveryFlag> DeliveryFlags;
        virtual ~QSceneChange();
        Qt3DCore::ChangeFlag type() const;
        void setDeliveryFlags(Qt3DCore::QSceneChange::DeliveryFlags flags);
        Qt3DCore::QSceneChange::DeliveryFlags deliveryFlags() const;
        Qt3DCore::QNodeId subjectId() const;

    protected:
        QSceneChange(Qt3DCore::ChangeFlag type, Qt3DCore::QNodeId subjectId);

    private:
        QSceneChange(const QSceneChange &);
    };

    QFlags<Qt3DCore::QSceneChange::DeliveryFlag> operator|(Qt3DCore::QSceneChange::DeliveryFlag f1, QFlags<Qt3DCore::QSceneChange::DeliveryFlag> f2);
    typedef QSharedPointer<Qt3DCore::QSceneChange> QSceneChangePtr;
};

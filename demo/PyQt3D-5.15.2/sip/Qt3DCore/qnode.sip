// qnode.sip generated by MetaSIP
//
// This file is part of the Qt3DCore Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DCore
{
%TypeHeaderCode
#include <qnode.h>
%End

    typedef QVector<Qt3DCore::QNode *> QNodeVector;

    class QNode : QObject
    {
%TypeHeaderCode
#include <qnode.h>
%End

%ConvertToSubClassCode
        static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_Qt3DCore__QAbstractAspect, &sipType_Qt3DCore_QAbstractAspect, -1, 1},
            {sipName_Qt3DCore__QNode, &sipType_Qt3DCore_QNode, 3, 2},
            {sipName_Qt3DCore__QAspectEngine, &sipType_Qt3DCore_QAspectEngine, -1, -1},
        #if QT3DEXTRAS_VERSION >= 0x050a00
            {sipName_Qt3DCore__QAbstractSkeleton, &sipType_Qt3DCore_QAbstractSkeleton, 7, 4},
        #else
            {0, 0, 7, 4},
        #endif
            {sipName_Qt3DCore__QComponent, &sipType_Qt3DCore_QComponent, 9, 5},
            {sipName_Qt3DCore__QEntity, &sipType_Qt3DCore_QEntity, -1, 6},
        #if QT3DEXTRAS_VERSION >= 0x050a00
            {sipName_Qt3DCore__QJoint, &sipType_Qt3DCore_QJoint, -1, -1},
        #else
            {0, 0, -1, -1},
        #endif
        #if QT3DEXTRAS_VERSION >= 0x050a00
            {sipName_Qt3DCore__QSkeleton, &sipType_Qt3DCore_QSkeleton, -1, 8},
        #else
            {0, 0, -1, 8},
        #endif
        #if QT3DEXTRAS_VERSION >= 0x050a00
            {sipName_Qt3DCore__QSkeletonLoader, &sipType_Qt3DCore_QSkeletonLoader, -1, -1},
        #else
            {0, 0, -1, -1},
        #endif
        #if QT3DEXTRAS_VERSION >= 0x050a00
            {sipName_Qt3DCore__QArmature, &sipType_Qt3DCore_QArmature, -1, 10},
        #else
            {0, 0, -1, 10},
        #endif
            {sipName_Qt3DCore__QTransform, &sipType_Qt3DCore_QTransform, -1, -1},
        };
        
        int i = 0;
        
        sipType = NULL;
        
        do
        {
            struct class_graph *cg = &graph[i];
        
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

    public:
        explicit QNode(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QNode();
        Qt3DCore::QNodeId id() const;
        Qt3DCore::QNode *parentNode() const;
        bool notificationsBlocked() const;
        bool blockNotifications(bool block);
        Qt3DCore::QNodeVector childNodes() const;
        bool isEnabled() const;

    public slots:
        void setParent(Qt3DCore::QNode *parent /TransferThis/);
        void setEnabled(bool isEnabled);

    signals:
        void parentChanged(QObject *parent);
        void enabledChanged(bool enabled);
        void nodeDestroyed();

    protected:
        void notifyObservers(const Qt3DCore::QSceneChangePtr &change);
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);

    public:
%If (Qt3D_5_9_0 -)

        enum PropertyTrackingMode
        {
            TrackFinalValues,
            DontTrackValues,
            TrackAllValues,
        };

%End
%If (Qt3D_5_9_0 -)
        Qt3DCore::QNode::PropertyTrackingMode defaultPropertyTrackingMode() const;
%End
%If (Qt3D_5_9_0 -)
        void setPropertyTracking(const QString &propertyName, Qt3DCore::QNode::PropertyTrackingMode trackMode);
%End
%If (Qt3D_5_9_0 -)
        Qt3DCore::QNode::PropertyTrackingMode propertyTracking(const QString &propertyName) const;
%End
%If (Qt3D_5_9_0 -)
        void clearPropertyTracking(const QString &propertyName);
%End
%If (Qt3D_5_9_0 -)
        void clearPropertyTrackings();
%End

    public slots:
%If (Qt3D_5_9_0 -)
        void setDefaultPropertyTrackingMode(Qt3DCore::QNode::PropertyTrackingMode mode);
%End

    signals:
%If (Qt3D_5_9_0 -)
        void defaultPropertyTrackingModeChanged(Qt3DCore::QNode::PropertyTrackingMode mode /ScopesStripped=2/);
%End

    public:
%If (Qt3D_5_10_0 -)
        Qt3DCore::QNodeCommand::CommandId sendCommand(const QString &name, const QVariant &data = QVariant(), Qt3DCore::QNodeCommand::CommandId replyTo = Qt3DCore::QNodeCommand::CommandId());
%End
%If (Qt3D_5_10_0 -)
        void sendReply(const Qt3DCore::QNodeCommandPtr &command);
%End
    };

    Qt3DCore::QNodeId qIdForNode(Qt3DCore::QNode *node);

    struct QNodeIdTypePair
    {
%TypeHeaderCode
#include <qnode.h>
%End

        QNodeIdTypePair();
        QNodeIdTypePair(Qt3DCore::QNodeId _id, const QMetaObject *_type);
        Qt3DCore::QNodeId id;
        const QMetaObject *type;
    };
};

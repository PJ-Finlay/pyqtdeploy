// qtransform.sip generated by MetaSIP
//
// This file is part of the Qt3DCore Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DCore
{
%TypeHeaderCode
#include <qtransform.h>
%End

    class QTransform : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qtransform.h>
%End

    public:
        explicit QTransform(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTransform();
        float scale() const;
        QVector3D scale3D() const;
        QQuaternion rotation() const;
        QVector3D translation() const;
%If (Qt3D_5_11_0 -)
        static QQuaternion fromAxes(const QVector3D &xAxis, const QVector3D &yAxis, const QVector3D &zAxis);
%End
        static QQuaternion fromAxisAndAngle(const QVector3D &axis, float angle);
        static QQuaternion fromAxisAndAngle(float x, float y, float z, float angle);
        static QQuaternion fromAxesAndAngles(const QVector3D &axis1, float angle1, const QVector3D &axis2, float angle2);
        static QQuaternion fromAxesAndAngles(const QVector3D &axis1, float angle1, const QVector3D &axis2, float angle2, const QVector3D &axis3, float angle3);
        static QQuaternion fromEulerAngles(const QVector3D &eulerAngles);
        static QQuaternion fromEulerAngles(float pitch, float yaw, float roll);
        static QMatrix4x4 rotateAround(const QVector3D &point, float angle, const QVector3D &axis);
%If (Qt3D_5_11_0 -)
        static QMatrix4x4 rotateFromAxes(const QVector3D &xAxis, const QVector3D &yAxis, const QVector3D &zAxis);
%End
        QMatrix4x4 matrix() const;
        float rotationX() const;
        float rotationY() const;
        float rotationZ() const;

    public slots:
        void setScale(float scale);
        void setScale3D(const QVector3D &scale);
        void setRotation(const QQuaternion &rotation);
        void setTranslation(const QVector3D &translation);
        void setMatrix(const QMatrix4x4 &matrix);
        void setRotationX(float rotationX);
        void setRotationY(float rotationY);
        void setRotationZ(float rotationZ);

    signals:
        void scaleChanged(float scale);
        void scale3DChanged(const QVector3D &scale);
        void rotationChanged(const QQuaternion &rotation);
        void translationChanged(const QVector3D &translation);
        void matrixChanged();
        void rotationXChanged(float rotationX);
        void rotationYChanged(float rotationY);
        void rotationZChanged(float rotationZ);

    public:
%If (Qt3D_5_14_0 -)
        QMatrix4x4 worldMatrix() const;
%End

    signals:
%If (Qt3D_5_14_0 -)
        void worldMatrixChanged(const QMatrix4x4 &worldMatrix);
%End

    protected:
%If (Qt3D_5_14_0 -)
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
%End
    };
};

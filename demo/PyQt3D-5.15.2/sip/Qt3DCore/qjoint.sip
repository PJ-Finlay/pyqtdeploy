// qjoint.sip generated by MetaSIP
//
// This file is part of the Qt3DCore Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_10_0 -)

namespace Qt3DCore
{
%TypeHeaderCode
#include <qjoint.h>
%End

    class QJoint : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qjoint.h>
%End

    public:
        explicit QJoint(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QJoint();
        QVector3D scale() const;
        QQuaternion rotation() const;
        QVector3D translation() const;
        QMatrix4x4 inverseBindMatrix() const;
        float rotationX() const;
        float rotationY() const;
        float rotationZ() const;
        QString name() const;
        void addChildJoint(Qt3DCore::QJoint *joint);
        void removeChildJoint(Qt3DCore::QJoint *joint);
        QVector<Qt3DCore::QJoint *> childJoints() const;

    public slots:
        void setScale(const QVector3D &scale);
        void setRotation(const QQuaternion &rotation);
        void setTranslation(const QVector3D &translation);
        void setInverseBindMatrix(const QMatrix4x4 &inverseBindMatrix);
        void setRotationX(float rotationX);
        void setRotationY(float rotationY);
        void setRotationZ(float rotationZ);
        void setName(const QString &name);
        void setToIdentity();

    signals:
        void scaleChanged(const QVector3D &scale);
        void rotationChanged(const QQuaternion &rotation);
        void translationChanged(const QVector3D &translation);
        void inverseBindMatrixChanged(const QMatrix4x4 &inverseBindMatrix);
        void rotationXChanged(float rotationX);
        void rotationYChanged(float rotationY);
        void rotationZChanged(float rotationZ);
        void nameChanged(const QString &name);
    };
};

%End

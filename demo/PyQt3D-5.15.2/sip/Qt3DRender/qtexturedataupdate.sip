// qtexturedataupdate.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_14_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qtexturedataupdate.h>
%End

    class QTextureDataUpdate
    {
%TypeHeaderCode
#include <qtexturedataupdate.h>
%End

    public:
        QTextureDataUpdate();
        QTextureDataUpdate(const Qt3DRender::QTextureDataUpdate &other);
        ~QTextureDataUpdate();
        void swap(Qt3DRender::QTextureDataUpdate &other /Constrained/);
        int x() const;
        int y() const;
        int z() const;
        int layer() const;
        int mipLevel() const;
        Qt3DRender::QAbstractTexture::CubeMapFace face() const;
        Qt3DRender::QTextureImageDataPtr data() const;
        void setX(int x);
        void setY(int y);
        void setZ(int z);
        void setLayer(int layer);
        void setMipLevel(int mipLevel);
        void setFace(Qt3DRender::QAbstractTexture::CubeMapFace face);
        void setData(const Qt3DRender::QTextureImageDataPtr &data);
    };

    bool operator==(const Qt3DRender::QTextureDataUpdate &lhs, const Qt3DRender::QTextureDataUpdate &rhs);
    bool operator!=(const Qt3DRender::QTextureDataUpdate &lhs, const Qt3DRender::QTextureDataUpdate &rhs);
};

%End

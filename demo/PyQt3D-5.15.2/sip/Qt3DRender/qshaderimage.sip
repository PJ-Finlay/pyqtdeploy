// qshaderimage.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_14_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qshaderimage.h>
%End

    class QShaderImage : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qshaderimage.h>
%End

    public:
        enum Access
        {
            ReadOnly,
            WriteOnly,
            ReadWrite,
        };

        enum ImageFormat
        {
            NoFormat,
            Automatic,
            R8_UNorm,
            RG8_UNorm,
            RGBA8_UNorm,
            R16_UNorm,
            RG16_UNorm,
            RGBA16_UNorm,
            R8_SNorm,
            RG8_SNorm,
            RGBA8_SNorm,
            R16_SNorm,
            RG16_SNorm,
            RGBA16_SNorm,
            R8U,
            RG8U,
            RGBA8U,
            R16U,
            RG16U,
            RGBA16U,
            R32U,
            RG32U,
            RGBA32U,
            R8I,
            RG8I,
            RGBA8I,
            R16I,
            RG16I,
            RGBA16I,
            R32I,
            RG32I,
            RGBA32I,
            R16F,
            RG16F,
            RGBA16F,
            R32F,
            RG32F,
            RGBA32F,
            RG11B10F,
            RGB10A2,
            RGB10A2U,
        };

        explicit QShaderImage(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QShaderImage();
        Qt3DRender::QAbstractTexture *texture() const;
        bool layered() const;
        int mipLevel() const;
        int layer() const;
        Qt3DRender::QShaderImage::Access access() const;
        Qt3DRender::QShaderImage::ImageFormat format() const;

    public slots:
        void setTexture(Qt3DRender::QAbstractTexture *texture);
        void setLayered(bool layered);
        void setMipLevel(int mipLevel);
        void setLayer(int layer);
        void setAccess(Qt3DRender::QShaderImage::Access access);
        void setFormat(Qt3DRender::QShaderImage::ImageFormat format);

    signals:
        void textureChanged(Qt3DRender::QAbstractTexture *texture);
        void layeredChanged(bool layered);
        void mipLevelChanged(int mipLevel);
        void layerChanged(int layer);
        void accessChanged(Qt3DRender::QShaderImage::Access access);
        void formatChanged(Qt3DRender::QShaderImage::ImageFormat format);
    };
};

%End

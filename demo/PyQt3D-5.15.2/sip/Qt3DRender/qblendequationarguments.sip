// qblendequationarguments.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qblendequationarguments.h>
%End

    class QBlendEquationArguments : Qt3DRender::QRenderState
    {
%TypeHeaderCode
#include <qblendequationarguments.h>
%End

    public:
        enum Blending
        {
            Zero,
            One,
            SourceColor,
            SourceAlpha,
            Source1Alpha,
            Source1Color,
            DestinationColor,
            DestinationAlpha,
            SourceAlphaSaturate,
            ConstantColor,
            ConstantAlpha,
            OneMinusSourceColor,
            OneMinusSourceAlpha,
            OneMinusDestinationAlpha,
            OneMinusDestinationColor,
            OneMinusConstantColor,
            OneMinusConstantAlpha,
            OneMinusSource1Alpha,
            OneMinusSource1Color0,
%If (Qt3D_5_8_0 -)
            OneMinusSource1Color,
%End
        };

        explicit QBlendEquationArguments(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QBlendEquationArguments();
        Qt3DRender::QBlendEquationArguments::Blending sourceRgb() const;
        Qt3DRender::QBlendEquationArguments::Blending destinationRgb() const;
        Qt3DRender::QBlendEquationArguments::Blending sourceAlpha() const;
        Qt3DRender::QBlendEquationArguments::Blending destinationAlpha() const;
        int bufferIndex() const;

    public slots:
        void setSourceRgb(Qt3DRender::QBlendEquationArguments::Blending sourceRgb);
        void setDestinationRgb(Qt3DRender::QBlendEquationArguments::Blending destinationRgb);
        void setSourceAlpha(Qt3DRender::QBlendEquationArguments::Blending sourceAlpha);
        void setDestinationAlpha(Qt3DRender::QBlendEquationArguments::Blending destinationAlpha);
        void setSourceRgba(Qt3DRender::QBlendEquationArguments::Blending sourceRgba);
        void setDestinationRgba(Qt3DRender::QBlendEquationArguments::Blending destinationRgba);
        void setBufferIndex(int index);

    signals:
        void sourceRgbChanged(Qt3DRender::QBlendEquationArguments::Blending sourceRgb /ScopesStripped=2/);
        void sourceAlphaChanged(Qt3DRender::QBlendEquationArguments::Blending sourceAlpha /ScopesStripped=2/);
        void destinationRgbChanged(Qt3DRender::QBlendEquationArguments::Blending destinationRgb /ScopesStripped=2/);
        void destinationAlphaChanged(Qt3DRender::QBlendEquationArguments::Blending destinationAlpha /ScopesStripped=2/);
        void sourceRgbaChanged(Qt3DRender::QBlendEquationArguments::Blending sourceRgba /ScopesStripped=2/);
        void destinationRgbaChanged(Qt3DRender::QBlendEquationArguments::Blending destinationRgba /ScopesStripped=2/);
        void bufferIndexChanged(int index);
    };
};

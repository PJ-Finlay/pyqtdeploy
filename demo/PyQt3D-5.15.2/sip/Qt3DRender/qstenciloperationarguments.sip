// qstenciloperationarguments.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qstenciloperationarguments.h>
%End

    class QStencilOperationArguments : QObject /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qstenciloperationarguments.h>
%End

    public:
        enum FaceMode
        {
            Front,
            Back,
            FrontAndBack,
        };

        enum Operation
        {
            Zero,
            Keep,
            Replace,
            Increment,
            Decrement,
            IncrementWrap,
            DecrementWrap,
            Invert,
        };

        virtual ~QStencilOperationArguments();
        Qt3DRender::QStencilOperationArguments::FaceMode faceMode() const;
        Qt3DRender::QStencilOperationArguments::Operation stencilTestFailureOperation() const;
        Qt3DRender::QStencilOperationArguments::Operation depthTestFailureOperation() const;
        Qt3DRender::QStencilOperationArguments::Operation allTestsPassOperation() const;

    public slots:
        void setStencilTestFailureOperation(Qt3DRender::QStencilOperationArguments::Operation operation);
        void setDepthTestFailureOperation(Qt3DRender::QStencilOperationArguments::Operation operation);
        void setAllTestsPassOperation(Qt3DRender::QStencilOperationArguments::Operation operation);

    signals:
        void stencilTestFailureOperationChanged(Qt3DRender::QStencilOperationArguments::Operation stencilFail /ScopesStripped=2/);
        void depthTestFailureOperationChanged(Qt3DRender::QStencilOperationArguments::Operation depthFail /ScopesStripped=2/);
        void allTestsPassOperationChanged(Qt3DRender::QStencilOperationArguments::Operation stencilDepthPass /ScopesStripped=2/);
        void faceModeChanged(Qt3DRender::QStencilOperationArguments::FaceMode faceMode /ScopesStripped=2/);
    };
};

// qblitframebuffer.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_10_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qblitframebuffer.h>
%End

    class QBlitFramebuffer : Qt3DRender::QFrameGraphNode
    {
%TypeHeaderCode
#include <qblitframebuffer.h>
%End

    public:
        enum InterpolationMethod
        {
            Nearest,
            Linear,
        };

        explicit QBlitFramebuffer(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QBlitFramebuffer();
        Qt3DRender::QRenderTarget *source() const;
        Qt3DRender::QRenderTarget *destination() const;
        QRectF sourceRect() const;
        QRectF destinationRect() const;
        Qt3DRender::QRenderTargetOutput::AttachmentPoint sourceAttachmentPoint() const;
        Qt3DRender::QRenderTargetOutput::AttachmentPoint destinationAttachmentPoint() const;
        Qt3DRender::QBlitFramebuffer::InterpolationMethod interpolationMethod() const;
        void setSource(Qt3DRender::QRenderTarget *source);
        void setDestination(Qt3DRender::QRenderTarget *destination);
        void setSourceRect(const QRectF &sourceRect);
        void setDestinationRect(const QRectF &destinationRect);
        void setSourceAttachmentPoint(Qt3DRender::QRenderTargetOutput::AttachmentPoint sourceAttachmentPoint);
        void setDestinationAttachmentPoint(Qt3DRender::QRenderTargetOutput::AttachmentPoint destinationAttachmentPoint);
        void setInterpolationMethod(Qt3DRender::QBlitFramebuffer::InterpolationMethod interpolationMethod);

    signals:
        void sourceChanged();
        void destinationChanged();
        void sourceRectChanged();
        void destinationRectChanged();
        void sourceAttachmentPointChanged();
        void destinationAttachmentPointChanged();
        void interpolationMethodChanged();
    };
};

%End

// qobjectpicker.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qobjectpicker.h>
%End

    class QObjectPicker : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qobjectpicker.h>
%End

    public:
        explicit QObjectPicker(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QObjectPicker();
        bool isHoverEnabled() const;
        bool isDragEnabled() const;
        bool containsMouse() const;
        bool isPressed() const;

    public slots:
        void setHoverEnabled(bool hoverEnabled);
        void setDragEnabled(bool dragEnabled);

    signals:
        void pressed(Qt3DRender::QPickEvent *pick);
        void released(Qt3DRender::QPickEvent *pick);
        void clicked(Qt3DRender::QPickEvent *pick);
        void moved(Qt3DRender::QPickEvent *pick);
        void entered();
        void exited();
        void hoverEnabledChanged(bool hoverEnabled);
        void dragEnabledChanged(bool dragEnabled);
        void pressedChanged(bool pressed);
        void containsMouseChanged(bool containsMouse);

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);

    public:
%If (Qt3D_5_13_0 -)
        int priority() const;
%End

    public slots:
%If (Qt3D_5_13_0 -)
        void setPriority(int priority);
%End

    signals:
%If (Qt3D_5_13_0 -)
        void priorityChanged(int priority);
%End
    };
};

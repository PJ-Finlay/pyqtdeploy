// qgeometryrenderer.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qgeometryrenderer.h>
%End

    class QGeometryRenderer : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qgeometryrenderer.h>
%End

    public:
        explicit QGeometryRenderer(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QGeometryRenderer();

        enum PrimitiveType
        {
            Points,
            Lines,
            LineLoop,
            LineStrip,
            Triangles,
            TriangleStrip,
            TriangleFan,
            LinesAdjacency,
            TrianglesAdjacency,
            LineStripAdjacency,
            TriangleStripAdjacency,
            Patches,
        };

        int instanceCount() const;
        int vertexCount() const;
        int indexOffset() const;
        int firstInstance() const;
        int firstVertex() const;
        int restartIndexValue() const;
        int verticesPerPatch() const;
        bool primitiveRestartEnabled() const;
        Qt3DRender::QGeometry *geometry() const;
        Qt3DRender::QGeometryRenderer::PrimitiveType primitiveType() const;
        Qt3DRender::QGeometryFactoryPtr geometryFactory() const;
        void setGeometryFactory(const Qt3DRender::QGeometryFactoryPtr &factory);

    public slots:
        void setInstanceCount(int instanceCount);
        void setVertexCount(int vertexCount);
        void setIndexOffset(int indexOffset);
        void setFirstInstance(int firstInstance);
        void setFirstVertex(int firstVertex);
        void setRestartIndexValue(int index);
        void setVerticesPerPatch(int verticesPerPatch);
        void setPrimitiveRestartEnabled(bool enabled);
        void setGeometry(Qt3DRender::QGeometry *geometry);
        void setPrimitiveType(Qt3DRender::QGeometryRenderer::PrimitiveType primitiveType);

    signals:
        void instanceCountChanged(int instanceCount);
        void vertexCountChanged(int vertexCount);
        void indexOffsetChanged(int indexOffset);
        void firstInstanceChanged(int firstInstance);
        void firstVertexChanged(int firstVertex);
        void restartIndexValueChanged(int restartIndexValue);
        void verticesPerPatchChanged(int verticesPerPatch);
        void primitiveRestartEnabledChanged(bool primitiveRestartEnabled);
        void geometryChanged(Qt3DRender::QGeometry *geometry /ScopesStripped=1/);
        void primitiveTypeChanged(Qt3DRender::QGeometryRenderer::PrimitiveType primitiveType /ScopesStripped=2/);

    public:
%If (Qt3D_5_10_0 -)
        int indexBufferByteOffset() const;
%End

    public slots:
%If (Qt3D_5_10_0 -)
        void setIndexBufferByteOffset(int offset);
%End

    signals:
%If (Qt3D_5_10_0 -)
        void indexBufferByteOffsetChanged(int offset);
%End

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
    };
};

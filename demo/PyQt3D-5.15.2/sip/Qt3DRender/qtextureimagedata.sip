// qtextureimagedata.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qtextureimagedata.h>
%End

    class QTextureImageData
    {
%TypeHeaderCode
#include <qtextureimagedata.h>
%End

    public:
        QTextureImageData();
        ~QTextureImageData();
        void cleanup();
        bool isCompressed() const;
        int width() const;
        int height() const;
        int depth() const;
        int layers() const;
        int mipLevels() const;
        int faces() const;
        void setWidth(int width);
        void setHeight(int height);
        void setDepth(int depth);
        void setLayers(int layers);
        void setMipLevels(int mipLevels);
        void setFaces(int faces);
        QOpenGLTexture::Target target() const;
        QOpenGLTexture::TextureFormat format() const;
        QOpenGLTexture::PixelFormat pixelFormat() const;
        QOpenGLTexture::PixelType pixelType() const;
        void setTarget(QOpenGLTexture::Target target);
        void setFormat(QOpenGLTexture::TextureFormat format);
        void setPixelFormat(QOpenGLTexture::PixelFormat pixelFormat);
        void setPixelType(QOpenGLTexture::PixelType pixelType);
        void setImage(const QImage &);
        void setData(const QByteArray &data, int blockSize, bool isCompressed = false);
        QByteArray data(int layer = 0, int face = 0, int mipmapLevel = 0) const;
    };

    typedef QSharedPointer<Qt3DRender::QTextureImageData> QTextureImageDataPtr;
};

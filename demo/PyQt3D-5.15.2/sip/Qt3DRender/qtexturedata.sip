// qtexturedata.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qtexturedata.h>
%End

    class QTextureData
    {
%TypeHeaderCode
#include <qtexturedata.h>
%End

    public:
        QTextureData();
        ~QTextureData();
        Qt3DRender::QAbstractTexture::Target target() const;
        void setTarget(Qt3DRender::QAbstractTexture::Target target);
        Qt3DRender::QAbstractTexture::TextureFormat format() const;
        void setFormat(Qt3DRender::QAbstractTexture::TextureFormat);
        int width() const;
        void setWidth(int width);
        int height() const;
        void setHeight(int height);
        int depth() const;
        void setDepth(int depth);
        int layers() const;
        void setLayers(int layers);
        bool isAutoMipMapGenerationEnabled() const;
        void setAutoMipMapGenerationEnabled(bool isAutoMipMapGenerationEnabled);
        float maximumAnisotropy() const;
        void setMaximumAnisotropy(float maximumAnisotropy);
        Qt3DRender::QAbstractTexture::Filter minificationFilter() const;
        void setMinificationFilter(Qt3DRender::QAbstractTexture::Filter filter);
        Qt3DRender::QAbstractTexture::Filter magnificationFilter() const;
        void setMagnificationFilter(Qt3DRender::QAbstractTexture::Filter filter);
        Qt3DRender::QTextureWrapMode::WrapMode wrapModeX() const;
        void setWrapModeX(Qt3DRender::QTextureWrapMode::WrapMode wrapModeX);
        Qt3DRender::QTextureWrapMode::WrapMode wrapModeY() const;
        void setWrapModeY(Qt3DRender::QTextureWrapMode::WrapMode wrapModeY);
        Qt3DRender::QTextureWrapMode::WrapMode wrapModeZ() const;
        void setWrapModeZ(Qt3DRender::QTextureWrapMode::WrapMode wrapModeZ);
        Qt3DRender::QAbstractTexture::ComparisonFunction comparisonFunction() const;
        void setComparisonFunction(Qt3DRender::QAbstractTexture::ComparisonFunction comparisonFunction);
        Qt3DRender::QAbstractTexture::ComparisonMode comparisonMode() const;
        void setComparisonMode(Qt3DRender::QAbstractTexture::ComparisonMode comparisonMode);
        QVector<Qt3DRender::QTextureImageDataPtr> imageData() const;
        void addImageData(const Qt3DRender::QTextureImageDataPtr &imageData);
    };
};

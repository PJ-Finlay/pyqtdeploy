// qabstractraycaster.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_11_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qabstractraycaster.h>
%End

    class QAbstractRayCaster : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qabstractraycaster.h>
%End

    public:
        enum RunMode
        {
            Continuous,
            SingleShot,
        };

        enum FilterMode
        {
            AcceptAnyMatchingLayers,
            AcceptAllMatchingLayers,
            DiscardAnyMatchingLayers,
            DiscardAllMatchingLayers,
        };

        typedef QVector<Qt3DRender::QRayCasterHit> Hits;
        explicit QAbstractRayCaster(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QAbstractRayCaster();
        Qt3DRender::QAbstractRayCaster::RunMode runMode() const;
        Qt3DRender::QAbstractRayCaster::FilterMode filterMode() const;
        Qt3DRender::QAbstractRayCaster::Hits hits() const;
        void addLayer(Qt3DRender::QLayer *layer /GetWrapper/);
%MethodCode
            // This takes ownership only if it doesn't already have a parent.
            if (!a0->parent())
                sipTransferTo(a0Wrapper, sipSelf);
            
            sipCpp->addLayer(a0);
%End

        void removeLayer(Qt3DRender::QLayer *layer);
        QVector<Qt3DRender::QLayer *> layers() const;

    public slots:
        void setRunMode(Qt3DRender::QAbstractRayCaster::RunMode runMode);
        void setFilterMode(Qt3DRender::QAbstractRayCaster::FilterMode filterMode);

    signals:
        void runModeChanged(Qt3DRender::QAbstractRayCaster::RunMode runMode);
        void hitsChanged(const Qt3DRender::QAbstractRayCaster::Hits &hits);
        void filterModeChanged(Qt3DRender::QAbstractRayCaster::FilterMode filterMode);

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
    };
};

%End

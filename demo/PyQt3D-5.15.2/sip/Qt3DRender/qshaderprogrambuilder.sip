// qshaderprogrambuilder.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_10_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qshaderprogrambuilder.h>
%End

    class QShaderProgramBuilder : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qshaderprogrambuilder.h>
%End

    public:
        explicit QShaderProgramBuilder(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QShaderProgramBuilder();
        Qt3DRender::QShaderProgram *shaderProgram() const;
        QStringList enabledLayers() const;
        QUrl vertexShaderGraph() const;
        QUrl tessellationControlShaderGraph() const;
        QUrl tessellationEvaluationShaderGraph() const;
        QUrl geometryShaderGraph() const;
        QUrl fragmentShaderGraph() const;
        QUrl computeShaderGraph() const;

    public slots:
        void setShaderProgram(Qt3DRender::QShaderProgram *program);
        void setEnabledLayers(const QStringList &layers);
        void setVertexShaderGraph(const QUrl &vertexShaderGraph);
        void setTessellationControlShaderGraph(const QUrl &tessellationControlShaderGraph);
        void setTessellationEvaluationShaderGraph(const QUrl &tessellationEvaluationShaderGraph);
        void setGeometryShaderGraph(const QUrl &geometryShaderGraph);
        void setFragmentShaderGraph(const QUrl &fragmentShaderGraph);
        void setComputeShaderGraph(const QUrl &computeShaderGraph);

    signals:
        void shaderProgramChanged(Qt3DRender::QShaderProgram *shaderProgram);
        void enabledLayersChanged(const QStringList &layers);
        void vertexShaderGraphChanged(const QUrl &vertexShaderGraph);
        void tessellationControlShaderGraphChanged(const QUrl &tessellationControlShaderGraph);
        void tessellationEvaluationShaderGraphChanged(const QUrl &tessellationEvaluationShaderGraph);
        void geometryShaderGraphChanged(const QUrl &geometryShaderGraph);
        void fragmentShaderGraphChanged(const QUrl &fragmentShaderGraph);
        void computeShaderGraphChanged(const QUrl &computeShaderGraph);

    public:
%If (Qt3D_5_13_0 -)
        QByteArray vertexShaderCode() const;
%End
%If (Qt3D_5_13_0 -)
        QByteArray tessellationControlShaderCode() const;
%End
%If (Qt3D_5_13_0 -)
        QByteArray tessellationEvaluationShaderCode() const;
%End
%If (Qt3D_5_13_0 -)
        QByteArray geometryShaderCode() const;
%End
%If (Qt3D_5_13_0 -)
        QByteArray fragmentShaderCode() const;
%End
%If (Qt3D_5_13_0 -)
        QByteArray computeShaderCode() const;
%End

    signals:
%If (Qt3D_5_13_0 -)
        void vertexShaderCodeChanged(const QByteArray &vertexShaderCode);
%End
%If (Qt3D_5_13_0 -)
        void tessellationControlShaderCodeChanged(const QByteArray &tessellationControlShaderCode);
%End
%If (Qt3D_5_13_0 -)
        void tessellationEvaluationShaderCodeChanged(const QByteArray &tessellationEvaluationShaderCode);
%End
%If (Qt3D_5_13_0 -)
        void geometryShaderCodeChanged(const QByteArray &geometryShaderCode);
%End
%If (Qt3D_5_13_0 -)
        void fragmentShaderCodeChanged(const QByteArray &fragmentShaderCode);
%End
%If (Qt3D_5_13_0 -)
        void computeShaderCodeChanged(const QByteArray &computeShaderCode);
%End

    protected:
%If (Qt3D_5_13_0 -)
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
%End
    };
};

%End

// qattribute.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DRender
{
%TypeHeaderCode
#include <qattribute.h>
%End

    class QAttribute : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qattribute.h>
%End

    public:
        enum AttributeType
        {
            VertexAttribute,
            IndexAttribute,
%If (Qt3D_5_9_0 -)
            DrawIndirectAttribute,
%End
        };

        enum VertexBaseType
        {
            Byte,
            UnsignedByte,
            Short,
            UnsignedShort,
            Int,
            UnsignedInt,
            HalfFloat,
            Float,
            Double,
        };

        explicit QAttribute(Qt3DCore::QNode *parent /TransferThis/ = 0);
        QAttribute(Qt3DRender::QBuffer *buf /Transfer/, Qt3DRender::QAttribute::VertexBaseType vertexBaseType, uint vertexSize, uint count, uint offset = 0, uint stride = 0, Qt3DCore::QNode *parent /TransferThis/ = 0);
        QAttribute(Qt3DRender::QBuffer *buf /Transfer/, const QString &name, Qt3DRender::QAttribute::VertexBaseType vertexBaseType, uint vertexSize, uint count, uint offset = 0, uint stride = 0, Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QAttribute();
        Qt3DRender::QBuffer *buffer() const;
        QString name() const;
        Qt3DRender::QAttribute::VertexBaseType vertexBaseType() const;
        uint vertexSize() const;
        uint count() const;
        uint byteStride() const;
        uint byteOffset() const;
        uint divisor() const;
        Qt3DRender::QAttribute::AttributeType attributeType() const;
        static QString defaultPositionAttributeName();
        static QString defaultNormalAttributeName();
        static QString defaultColorAttributeName();
        static QString defaultTextureCoordinateAttributeName();
%If (Qt3D_5_11_0 -)
        static QString defaultTextureCoordinate1AttributeName();
%End
%If (Qt3D_5_11_0 -)
        static QString defaultTextureCoordinate2AttributeName();
%End
        static QString defaultTangentAttributeName();
%If (Qt3D_5_10_0 -)
        static QString defaultJointIndicesAttributeName();
%End
%If (Qt3D_5_10_0 -)
        static QString defaultJointWeightsAttributeName();
%End

    public slots:
        void setBuffer(Qt3DRender::QBuffer *buffer /Transfer/);
        void setName(const QString &name);
        void setDataType(Qt3DRender::QAttribute::VertexBaseType type);
        void setDataSize(uint size);
        void setCount(uint count);
        void setByteStride(uint byteStride);
        void setByteOffset(uint byteOffset);
        void setDivisor(uint divisor);
        void setAttributeType(Qt3DRender::QAttribute::AttributeType attributeType);
%If (Qt3D_5_8_0 -)
        void setVertexBaseType(Qt3DRender::QAttribute::VertexBaseType type);
%End
%If (Qt3D_5_8_0 -)
        void setVertexSize(uint size);
%End

    signals:
        void bufferChanged(Qt3DRender::QBuffer *buffer /ScopesStripped=1/);
        void nameChanged(const QString &name);
        void dataTypeChanged(Qt3DRender::QAttribute::VertexBaseType vertexBaseType /ScopesStripped=2/);
        void dataSizeChanged(uint vertexSize);
        void countChanged(uint count);
        void byteStrideChanged(uint byteStride);
        void byteOffsetChanged(uint byteOffset);
        void divisorChanged(uint divisor);
        void attributeTypeChanged(Qt3DRender::QAttribute::AttributeType attributeType /ScopesStripped=2/);
%If (Qt3D_5_8_0 -)
        void vertexBaseTypeChanged(Qt3DRender::QAttribute::VertexBaseType vertexBaseType /ScopesStripped=2/);
%End
%If (Qt3D_5_8_0 -)
        void vertexSizeChanged(uint vertexSize);
%End
    };
};

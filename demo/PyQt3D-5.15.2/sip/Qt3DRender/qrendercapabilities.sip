// qrendercapabilities.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_15_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qrendercapabilities.h>
%End

    class QRenderCapabilities : QObject
    {
%TypeHeaderCode
#include <qrendercapabilities.h>
%End

    public:
        enum API
        {
            OpenGL,
            OpenGLES,
            Vulkan,
            DirectX,
            RHI,
        };

        enum Profile
        {
            NoProfile,
            CoreProfile,
            CompatibilityProfile,
        };

        explicit QRenderCapabilities(QObject *parent /TransferThis/ = 0);
        virtual ~QRenderCapabilities();
        bool isValid() const;
        Qt3DRender::QRenderCapabilities::API api() const;
        Qt3DRender::QRenderCapabilities::Profile profile() const;
        int majorVersion() const;
        int minorVersion() const;
        QStringList extensions() const;
        QString vendor() const;
        QString renderer() const;
        QString driverVersion() const;
        QString glslVersion() const;
        int maxSamples() const;
        int maxTextureSize() const;
        int maxTextureUnits() const;
        int maxTextureLayers() const;
        bool supportsUBO() const;
        int maxUBOSize() const;
        int maxUBOBindings() const;
        bool supportsSSBO() const;
        int maxSSBOSize() const;
        int maxSSBOBindings() const;
        bool supportsImageStore() const;
        int maxImageUnits() const;
        bool supportsCompute() const;
        int maxWorkGroupCountX() const;
        int maxWorkGroupCountY() const;
        int maxWorkGroupCountZ() const;
        int maxWorkGroupSizeX() const;
        int maxWorkGroupSizeY() const;
        int maxWorkGroupSizeZ() const;
        int maxComputeInvocations() const;
        int maxComputeSharedMemorySize() const;
    };
};

%End

// qlevelofdetail.sip generated by MetaSIP
//
// This file is part of the Qt3DRender Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_9_0 -)

namespace Qt3DRender
{
%TypeHeaderCode
#include <qlevelofdetail.h>
%End

    class QLevelOfDetail : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qlevelofdetail.h>
%End

    public:
        enum ThresholdType
        {
            DistanceToCameraThreshold,
            ProjectedScreenPixelSizeThreshold,
        };

        explicit QLevelOfDetail(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QLevelOfDetail();
        Qt3DRender::QCamera *camera() const;
        int currentIndex() const;
        Qt3DRender::QLevelOfDetail::ThresholdType thresholdType() const;
        QVector<qreal> thresholds() const;
        Qt3DRender::QLevelOfDetailBoundingSphere volumeOverride() const;
        Qt3DRender::QLevelOfDetailBoundingSphere createBoundingSphere(const QVector3D &center, float radius);

    public slots:
        void setCamera(Qt3DRender::QCamera *camera);
        void setCurrentIndex(int currentIndex);
        void setThresholdType(Qt3DRender::QLevelOfDetail::ThresholdType thresholdType);
        void setThresholds(const QVector<qreal> &thresholds);
        void setVolumeOverride(const Qt3DRender::QLevelOfDetailBoundingSphere &volumeOverride);

    signals:
        void cameraChanged(Qt3DRender::QCamera *camera /ScopesStripped=1/);
        void currentIndexChanged(int currentIndex);
        void thresholdTypeChanged(Qt3DRender::QLevelOfDetail::ThresholdType thresholdType /ScopesStripped=2/);
        void thresholdsChanged(const QVector<qreal> &thresholds);
        void volumeOverrideChanged(const Qt3DRender::QLevelOfDetailBoundingSphere &volumeOverride /ScopesStripped=2/);

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
    };
};

%End

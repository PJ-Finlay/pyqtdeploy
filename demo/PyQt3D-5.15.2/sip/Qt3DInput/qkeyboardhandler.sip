// qkeyboardhandler.sip generated by MetaSIP
//
// This file is part of the Qt3DInput Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DInput
{
%TypeHeaderCode
#include <qkeyboardhandler.h>
%End

    class QKeyboardHandler : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qkeyboardhandler.h>
%End

    public:
        explicit QKeyboardHandler(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QKeyboardHandler();
        Qt3DInput::QKeyboardDevice *sourceDevice() const;
        bool focus() const;

    public slots:
        void setSourceDevice(Qt3DInput::QKeyboardDevice *keyboardDevice);
        void setFocus(bool focus);

    signals:
        void sourceDeviceChanged(Qt3DInput::QKeyboardDevice *keyboardDevice /ScopesStripped=1/);
        void focusChanged(bool focus);
        void digit0Pressed(Qt3DInput::QKeyEvent *event);
        void digit1Pressed(Qt3DInput::QKeyEvent *event);
        void digit2Pressed(Qt3DInput::QKeyEvent *event);
        void digit3Pressed(Qt3DInput::QKeyEvent *event);
        void digit4Pressed(Qt3DInput::QKeyEvent *event);
        void digit5Pressed(Qt3DInput::QKeyEvent *event);
        void digit6Pressed(Qt3DInput::QKeyEvent *event);
        void digit7Pressed(Qt3DInput::QKeyEvent *event);
        void digit8Pressed(Qt3DInput::QKeyEvent *event);
        void digit9Pressed(Qt3DInput::QKeyEvent *event);
        void leftPressed(Qt3DInput::QKeyEvent *event);
        void rightPressed(Qt3DInput::QKeyEvent *event);
        void upPressed(Qt3DInput::QKeyEvent *event);
        void downPressed(Qt3DInput::QKeyEvent *event);
        void tabPressed(Qt3DInput::QKeyEvent *event);
        void backtabPressed(Qt3DInput::QKeyEvent *event);
        void asteriskPressed(Qt3DInput::QKeyEvent *event);
        void numberSignPressed(Qt3DInput::QKeyEvent *event);
        void escapePressed(Qt3DInput::QKeyEvent *event);
        void returnPressed(Qt3DInput::QKeyEvent *event);
        void enterPressed(Qt3DInput::QKeyEvent *event);
        void deletePressed(Qt3DInput::QKeyEvent *event);
        void spacePressed(Qt3DInput::QKeyEvent *event);
        void backPressed(Qt3DInput::QKeyEvent *event);
        void cancelPressed(Qt3DInput::QKeyEvent *event);
        void selectPressed(Qt3DInput::QKeyEvent *event);
        void yesPressed(Qt3DInput::QKeyEvent *event);
        void noPressed(Qt3DInput::QKeyEvent *event);
        void context1Pressed(Qt3DInput::QKeyEvent *event);
        void context2Pressed(Qt3DInput::QKeyEvent *event);
        void context3Pressed(Qt3DInput::QKeyEvent *event);
        void context4Pressed(Qt3DInput::QKeyEvent *event);
        void callPressed(Qt3DInput::QKeyEvent *event);
        void hangupPressed(Qt3DInput::QKeyEvent *event);
        void flipPressed(Qt3DInput::QKeyEvent *event);
        void menuPressed(Qt3DInput::QKeyEvent *event);
        void volumeUpPressed(Qt3DInput::QKeyEvent *event);
        void volumeDownPressed(Qt3DInput::QKeyEvent *event);
        void pressed(Qt3DInput::QKeyEvent *event);
        void released(Qt3DInput::QKeyEvent *event);

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
    };
};

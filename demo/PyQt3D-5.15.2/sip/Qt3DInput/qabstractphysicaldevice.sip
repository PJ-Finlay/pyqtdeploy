// qabstractphysicaldevice.sip generated by MetaSIP
//
// This file is part of the Qt3DInput Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DInput
{
%TypeHeaderCode
#include <qabstractphysicaldevice.h>
%End

    class QAbstractPhysicalDevice : Qt3DCore::QNode
    {
%TypeHeaderCode
#include <qabstractphysicaldevice.h>
%End

%ConvertToSubClassCode
        static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_Qt3DInput__QAbstractActionInput, &sipType_Qt3DInput_QAbstractActionInput, 15, 1},
            {sipName_Qt3DInput__QAbstractAxisInput, &sipType_Qt3DInput_QAbstractAxisInput, 18, 2},
            {sipName_Qt3DInput__QAbstractPhysicalDevice, &sipType_Qt3DInput_QAbstractPhysicalDevice, 20, 3},
            {sipName_Qt3DInput__QAction, &sipType_Qt3DInput_QAction, -1, 4},
            {sipName_Qt3DInput__QAxis, &sipType_Qt3DInput_QAxis, -1, 5},
        #if QT3DINPUT_VERSION >= 0x050800
            {sipName_Qt3DInput__QAxisAccumulator, &sipType_Qt3DInput_QAxisAccumulator, -1, 6},
        #else
            {0, 0, -1, 6},
        #endif
            {sipName_Qt3DInput__QAxisSetting, &sipType_Qt3DInput_QAxisSetting, -1, 7},
            {sipName_Qt3DInput__QInputAspect, &sipType_Qt3DInput_QInputAspect, -1, 8},
            {sipName_Qt3DInput__QInputSettings, &sipType_Qt3DInput_QInputSettings, -1, 9},
            {sipName_Qt3DInput__QKeyEvent, &sipType_Qt3DInput_QKeyEvent, -1, 10},
            {sipName_Qt3DInput__QKeyboardHandler, &sipType_Qt3DInput_QKeyboardHandler, -1, 11},
            {sipName_Qt3DInput__QLogicalDevice, &sipType_Qt3DInput_QLogicalDevice, -1, 12},
            {sipName_Qt3DInput__QMouseEvent, &sipType_Qt3DInput_QMouseEvent, -1, 13},
            {sipName_Qt3DInput__QMouseHandler, &sipType_Qt3DInput_QMouseHandler, -1, 14},
            {sipName_Qt3DInput__QWheelEvent, &sipType_Qt3DInput_QWheelEvent, -1, -1},
            {sipName_Qt3DInput__QActionInput, &sipType_Qt3DInput_QActionInput, -1, 16},
            {sipName_Qt3DInput__QInputChord, &sipType_Qt3DInput_QInputChord, -1, 17},
            {sipName_Qt3DInput__QInputSequence, &sipType_Qt3DInput_QInputSequence, -1, -1},
            {sipName_Qt3DInput__QAnalogAxisInput, &sipType_Qt3DInput_QAnalogAxisInput, -1, 19},
            {sipName_Qt3DInput__QButtonAxisInput, &sipType_Qt3DInput_QButtonAxisInput, -1, -1},
            {sipName_Qt3DInput__QKeyboardDevice, &sipType_Qt3DInput_QKeyboardDevice, -1, 21},
            {sipName_Qt3DInput__QMouseDevice, &sipType_Qt3DInput_QMouseDevice, -1, -1},
        };
        
        int i = 0;
        
        sipType = NULL;
        
        do
        {
            struct class_graph *cg = &graph[i];
        
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

    public:
        explicit QAbstractPhysicalDevice(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QAbstractPhysicalDevice();
        virtual int axisCount() const;
        virtual int buttonCount() const;
        virtual QStringList axisNames() const;
        virtual QStringList buttonNames() const;
        virtual int axisIdentifier(const QString &name) const;
        virtual int buttonIdentifier(const QString &name) const;
        void addAxisSetting(Qt3DInput::QAxisSetting *axisSetting);
        void removeAxisSetting(Qt3DInput::QAxisSetting *axisSetting);
        QVector<Qt3DInput::QAxisSetting *> axisSettings() const;
    };
};

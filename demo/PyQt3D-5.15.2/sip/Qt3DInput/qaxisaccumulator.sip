// qaxisaccumulator.sip generated by MetaSIP
//
// This file is part of the Qt3DInput Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_8_0 -)

namespace Qt3DInput
{
%TypeHeaderCode
#include <qaxisaccumulator.h>
%End

    class QAxisAccumulator : Qt3DCore::QComponent
    {
%TypeHeaderCode
#include <qaxisaccumulator.h>
%End

    public:
        enum SourceAxisType
        {
            Velocity,
            Acceleration,
        };

        QAxisAccumulator(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QAxisAccumulator();
        Qt3DInput::QAxis *sourceAxis() const;
        Qt3DInput::QAxisAccumulator::SourceAxisType sourceAxisType() const;
        float value() const;
        float velocity() const;
        float scale() const;

    public slots:
        void setSourceAxis(Qt3DInput::QAxis *sourceAxis);
        void setSourceAxisType(Qt3DInput::QAxisAccumulator::SourceAxisType sourceAxisType);
        void setScale(float scale);

    signals:
        void sourceAxisChanged(Qt3DInput::QAxis *sourceAxis);
        void sourceAxisTypeChanged(Qt3DInput::QAxisAccumulator::SourceAxisType sourceAxisType /ScopesStripped=1/);
        void valueChanged(float value);
        void velocityChanged(float value);
        void scaleChanged(float scale);

    protected:
        virtual void sceneChangeEvent(const Qt3DCore::QSceneChangePtr &change);
    };
};

%End

// qgoochmaterial.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qgoochmaterial.h>
%End

    class QGoochMaterial : Qt3DRender::QMaterial
    {
%TypeHeaderCode
#include <qgoochmaterial.h>
%End

    public:
        explicit QGoochMaterial(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QGoochMaterial();
        QColor diffuse() const;
        QColor specular() const;
        QColor cool() const;
        QColor warm() const;
        float alpha() const;
        float beta() const;
        float shininess() const;

    public slots:
        void setDiffuse(const QColor &diffuse);
        void setSpecular(const QColor &specular);
        void setCool(const QColor &cool);
        void setWarm(const QColor &warm);
        void setAlpha(float alpha);
        void setBeta(float beta);
        void setShininess(float shininess);

    signals:
        void diffuseChanged(const QColor &diffuse);
        void specularChanged(const QColor &specular);
        void coolChanged(const QColor &cool);
        void warmChanged(const QColor &warm);
        void alphaChanged(float alpha);
        void betaChanged(float beta);
        void shininessChanged(float shininess);
    };
};

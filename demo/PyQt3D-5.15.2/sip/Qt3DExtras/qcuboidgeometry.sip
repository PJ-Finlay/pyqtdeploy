// qcuboidgeometry.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qcuboidgeometry.h>
%End

    class QCuboidGeometry : Qt3DRender::QGeometry
    {
%TypeHeaderCode
#include <qcuboidgeometry.h>
%End

    public:
        explicit QCuboidGeometry(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QCuboidGeometry();
        void updateIndices();
        void updateVertices();
        float xExtent() const;
        float yExtent() const;
        float zExtent() const;
        QSize yzMeshResolution() const;
        QSize xyMeshResolution() const;
        QSize xzMeshResolution() const;
        Qt3DRender::QAttribute *positionAttribute() const;
        Qt3DRender::QAttribute *normalAttribute() const;
        Qt3DRender::QAttribute *texCoordAttribute() const;
        Qt3DRender::QAttribute *tangentAttribute() const;
        Qt3DRender::QAttribute *indexAttribute() const;

    public slots:
        void setXExtent(float xExtent);
        void setYExtent(float yExtent);
        void setZExtent(float zExtent);
        void setYZMeshResolution(const QSize &resolution);
        void setXZMeshResolution(const QSize &resolution);
        void setXYMeshResolution(const QSize &resolution);

    signals:
        void xExtentChanged(float xExtent);
        void yExtentChanged(float yExtent);
        void zExtentChanged(float zExtent);
        void yzMeshResolutionChanged(const QSize &yzMeshResolution);
        void xzMeshResolutionChanged(const QSize &xzMeshResolution);
        void xyMeshResolutionChanged(const QSize &xyMeshResolution);
    };
};

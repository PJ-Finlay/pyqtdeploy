// qtexturedmetalroughmaterial.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_9_0 -)

namespace Qt3DExtras
{
%TypeHeaderCode
#include <qtexturedmetalroughmaterial.h>
%End

%If (Qt3D_5_10_0 -)

    class QTexturedMetalRoughMaterial : Qt3DExtras::QMetalRoughMaterial
    {
%TypeHeaderCode
#include <qtexturedmetalroughmaterial.h>
%End

    public:
        explicit QTexturedMetalRoughMaterial(Qt3DCore::QNode *parent /TransferThis/ = 0);

    signals:
        void ambientOcclusionChanged(const QVariant &ambientOcclusion);
        void normalChanged(const QVariant &normal);
    };

%End
%If (- Qt3D_5_10_0)

    class QTexturedMetalRoughMaterial : Qt3DRender::QMaterial
    {
%TypeHeaderCode
#include <qtexturedmetalroughmaterial.h>
%End

    public:
        explicit QTexturedMetalRoughMaterial(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QTexturedMetalRoughMaterial();
        Qt3DRender::QAbstractTexture *baseColor() const;
        Qt3DRender::QAbstractTexture *metalness() const;
        Qt3DRender::QAbstractTexture *roughness() const;
        Qt3DRender::QAbstractTexture *ambientOcclusion() const;
        Qt3DRender::QAbstractTexture *normal() const;

    public slots:
        void setBaseColor(Qt3DRender::QAbstractTexture *baseColor /KeepReference/);
        void setMetalness(Qt3DRender::QAbstractTexture *metalness /KeepReference/);
        void setRoughness(Qt3DRender::QAbstractTexture *roughness /KeepReference/);
        void setAmbientOcclusion(Qt3DRender::QAbstractTexture *ambientOcclusion /KeepReference/);
        void setNormal(Qt3DRender::QAbstractTexture *normal /KeepReference/);

    signals:
        void baseColorChanged(Qt3DRender::QAbstractTexture *baseColor);
        void metalnessChanged(Qt3DRender::QAbstractTexture *metalness);
        void roughnessChanged(Qt3DRender::QAbstractTexture *roughness);
        void ambientOcclusionChanged(Qt3DRender::QAbstractTexture *ambientOcclusion);
        void normalChanged(Qt3DRender::QAbstractTexture *normal);
    };

%End
};

%End

// qforwardrenderer.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qforwardrenderer.h>
%End

    class QForwardRenderer : Qt3DRender::QTechniqueFilter
    {
%TypeHeaderCode
#include <qforwardrenderer.h>
%End

    public:
        explicit QForwardRenderer(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QForwardRenderer();
        QRectF viewportRect() const;
        QColor clearColor() const;
        Qt3DCore::QEntity *camera() const;
        QObject *surface() const;
%If (Qt3D_5_8_0 -)
        QSize externalRenderTargetSize() const;
%End

    public slots:
        void setViewportRect(const QRectF &viewportRect);
        void setClearColor(const QColor &clearColor);
        void setCamera(Qt3DCore::QEntity *camera);
        void setSurface(QObject *surface);
%If (Qt3D_5_8_0 -)
        void setExternalRenderTargetSize(const QSize &size);
%End

    signals:
        void viewportRectChanged(const QRectF &viewportRect);
        void clearColorChanged(const QColor &clearColor);
        void cameraChanged(Qt3DCore::QEntity *camera);
        void surfaceChanged(QObject *surface);
%If (Qt3D_5_8_0 -)
        void externalRenderTargetSizeChanged(const QSize &size);
%End

    public:
%If (Qt3D_5_9_0 -)
        bool isFrustumCullingEnabled() const;
%End
%If (Qt3D_5_9_0 -)
        float gamma() const;
%End

    public slots:
%If (Qt3D_5_9_0 -)
        void setFrustumCullingEnabled(bool enabled);
%End
%If (Qt3D_5_9_0 -)
        void setGamma(float gamma);
%End

    signals:
%If (Qt3D_5_9_0 -)
        void frustumCullingEnabledChanged(bool enabled);
%End
%If (Qt3D_5_9_0 -)
        void gammaChanged(float gamma);
%End

    public:
%If (Qt3D_5_14_0 -)
        Qt3DRender::QClearBuffers::BufferType buffersToClear() const;
%End

    public slots:
%If (Qt3D_5_14_0 -)
        void setBuffersToClear(Qt3DRender::QClearBuffers::BufferType);
%End

    signals:
%If (Qt3D_5_14_0 -)
        void buffersToClearChanged(Qt3DRender::QClearBuffers::BufferType);
%End

    public:
%If (Qt3D_5_15_0 -)
        bool showDebugOverlay() const;
%End

    public slots:
%If (Qt3D_5_15_0 -)
        void setShowDebugOverlay(bool showDebugOverlay);
%End

    signals:
%If (Qt3D_5_15_0 -)
        void showDebugOverlayChanged(bool showDebugOverlay);
%End
    };
};

// qphongalphamaterial.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace Qt3DExtras
{
%TypeHeaderCode
#include <qphongalphamaterial.h>
%End

    class QPhongAlphaMaterial : Qt3DRender::QMaterial
    {
%TypeHeaderCode
#include <qphongalphamaterial.h>
%End

    public:
        explicit QPhongAlphaMaterial(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QPhongAlphaMaterial();
        QColor ambient() const;
        QColor diffuse() const;
        QColor specular() const;
        float shininess() const;
        float alpha() const;

    public slots:
        void setAmbient(const QColor &ambient);
        void setDiffuse(const QColor &diffuse);
        void setSpecular(const QColor &specular);
        void setShininess(float shininess);
        void setAlpha(float alpha);

    signals:
        void ambientChanged(const QColor &ambient);
        void diffuseChanged(const QColor &diffuse);
        void specularChanged(const QColor &specular);
        void shininessChanged(float shininess);
        void alphaChanged(float alpha);

    public:
%If (Qt3D_5_7_1 -)
        Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg() const;
%End
%If (Qt3D_5_7_1 -)
        Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg() const;
%End
%If (Qt3D_5_7_1 -)
        Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg() const;
%End
%If (Qt3D_5_7_1 -)
        Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg() const;
%End
%If (Qt3D_5_7_1 -)
        Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg() const;
%End

    public slots:
%If (Qt3D_5_7_1 -)
        void setSourceRgbArg(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg);
%End
%If (Qt3D_5_7_1 -)
        void setDestinationRgbArg(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg);
%End
%If (Qt3D_5_7_1 -)
        void setSourceAlphaArg(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg);
%End
%If (Qt3D_5_7_1 -)
        void setDestinationAlphaArg(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg);
%End
%If (Qt3D_5_7_1 -)
        void setBlendFunctionArg(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg);
%End

    signals:
%If (Qt3D_5_7_1 -)
        void sourceRgbArgChanged(Qt3DRender::QBlendEquationArguments::Blending sourceRgbArg);
%End
%If (Qt3D_5_7_1 -)
        void destinationRgbArgChanged(Qt3DRender::QBlendEquationArguments::Blending destinationRgbArg);
%End
%If (Qt3D_5_7_1 -)
        void sourceAlphaArgChanged(Qt3DRender::QBlendEquationArguments::Blending sourceAlphaArg);
%End
%If (Qt3D_5_7_1 -)
        void destinationAlphaArgChanged(Qt3DRender::QBlendEquationArguments::Blending destinationAlphaArg);
%End
%If (Qt3D_5_7_1 -)
        void blendFunctionArgChanged(Qt3DRender::QBlendEquation::BlendFunction blendFunctionArg);
%End
    };
};

// qmetalroughmaterial.sip generated by MetaSIP
//
// This file is part of the Qt3DExtras Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt3D.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt3D_5_9_0 -)

namespace Qt3DExtras
{
%TypeHeaderCode
#include <qmetalroughmaterial.h>
%End

    class QMetalRoughMaterial : Qt3DRender::QMaterial
    {
%TypeHeaderCode
#include <qmetalroughmaterial.h>
%End

    public:
        explicit QMetalRoughMaterial(Qt3DCore::QNode *parent /TransferThis/ = 0);
        virtual ~QMetalRoughMaterial();
%If (- Qt3D_5_10_0)
        QColor baseColor() const;
%End
%If (- Qt3D_5_10_0)
        float metalness() const;
%End
%If (- Qt3D_5_10_0)
        float roughness() const;
%End

    public slots:
%If (- Qt3D_5_10_0)
        void setBaseColor(const QColor &baseColor);
%End
%If (- Qt3D_5_10_0)
        void setMetalness(float metalness);
%End
%If (- Qt3D_5_10_0)
        void setRoughness(float roughness);
%End

    signals:
%If (- Qt3D_5_10_0)
        void baseColorChanged(const QColor &baseColor);
%End
%If (- Qt3D_5_10_0)
        void metalnessChanged(float metalness);
%End
%If (- Qt3D_5_10_0)
        void roughnessChanged(float roughness);
%End

    public:
%If (Qt3D_5_10_0 -)
        QVariant baseColor() const;
%End
%If (Qt3D_5_10_0 -)
        QVariant metalness() const;
%End
%If (Qt3D_5_10_0 -)
        QVariant roughness() const;
%End
%If (Qt3D_5_10_0 -)
        QVariant ambientOcclusion() const;
%End
%If (Qt3D_5_10_0 -)
        QVariant normal() const;
%End
%If (Qt3D_5_10_0 -)
        float textureScale() const;
%End

    public slots:
%If (Qt3D_5_10_0 -)
        void setBaseColor(const QVariant &baseColor);
%End
%If (Qt3D_5_10_0 -)
        void setMetalness(const QVariant &metalness);
%End
%If (Qt3D_5_10_0 -)
        void setRoughness(const QVariant &roughness);
%End
%If (Qt3D_5_10_0 -)
        void setAmbientOcclusion(const QVariant &ambientOcclusion);
%End
%If (Qt3D_5_10_0 -)
        void setNormal(const QVariant &normal);
%End
%If (Qt3D_5_10_0 -)
        void setTextureScale(float textureScale);
%End

    signals:
%If (Qt3D_5_10_0 -)
        void baseColorChanged(const QVariant &baseColor);
%End
%If (Qt3D_5_10_0 -)
        void metalnessChanged(const QVariant &metalness);
%End
%If (Qt3D_5_10_0 -)
        void roughnessChanged(const QVariant &roughness);
%End
%If (Qt3D_5_10_0 -)
        void ambientOcclusionChanged(const QVariant &ambientOcclusion);
%End
%If (Qt3D_5_10_0 -)
        void normalChanged(const QVariant &normal);
%End
%If (Qt3D_5_10_0 -)
        void textureScaleChanged(float textureScale);
%End
    };
};

%End

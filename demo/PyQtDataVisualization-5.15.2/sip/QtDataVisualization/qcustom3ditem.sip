// qcustom3ditem.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (QtDataVisualization_1_1_0 -)

namespace QtDataVisualization
{
%TypeHeaderCode
#include <qcustom3ditem.h>
%End

    class QCustom3DItem : QObject
    {
%TypeHeaderCode
#include <qcustom3ditem.h>
%End

    public:
        explicit QCustom3DItem(QObject *parent /TransferThis/ = 0);
        QCustom3DItem(const QString &meshFile, const QVector3D &position, const QVector3D &scaling, const QQuaternion &rotation, const QImage &texture, QObject *parent /TransferThis/ = 0);
        virtual ~QCustom3DItem();
        void setMeshFile(const QString &meshFile);
        QString meshFile() const;
        void setTextureFile(const QString &textureFile);
        QString textureFile() const;
        void setPosition(const QVector3D &position);
        QVector3D position() const;
        void setPositionAbsolute(bool positionAbsolute);
        bool isPositionAbsolute() const;
        void setScaling(const QVector3D &scaling);
        QVector3D scaling() const;
        void setRotation(const QQuaternion &rotation);
        QQuaternion rotation();
        void setVisible(bool visible);
        bool isVisible() const;
        void setShadowCasting(bool enabled);
        bool isShadowCasting() const;
        void setRotationAxisAndAngle(const QVector3D &axis, float angle);
        void setTextureImage(const QImage &textureImage);

    signals:
        void meshFileChanged(const QString &meshFile);
        void textureFileChanged(const QString &textureFile);
        void positionChanged(const QVector3D &position);
        void positionAbsoluteChanged(bool positionAbsolute);
        void scalingChanged(const QVector3D &scaling);
        void rotationChanged(const QQuaternion &rotation);
        void visibleChanged(bool visible);
        void shadowCastingChanged(bool shadowCasting);

    public:
%If (QtDataVisualization_1_2_0 -)
        void setScalingAbsolute(bool scalingAbsolute);
%End
%If (QtDataVisualization_1_2_0 -)
        bool isScalingAbsolute() const;
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void scalingAbsoluteChanged(bool scalingAbsolute);
%End
    };
};

%End

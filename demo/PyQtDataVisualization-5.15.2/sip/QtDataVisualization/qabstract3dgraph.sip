// qabstract3dgraph.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qabstract3dgraph.h>
%End

    class QAbstract3DGraph : QWindow /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qabstract3dgraph.h>
%End

    public:
        enum SelectionFlag
        {
            SelectionNone,
            SelectionItem,
            SelectionRow,
            SelectionItemAndRow,
            SelectionColumn,
            SelectionItemAndColumn,
            SelectionRowAndColumn,
            SelectionItemRowAndColumn,
            SelectionSlice,
            SelectionMultiSeries,
        };

        typedef QFlags<QtDataVisualization::QAbstract3DGraph::SelectionFlag> SelectionFlags;

        enum ShadowQuality
        {
            ShadowQualityNone,
            ShadowQualityLow,
            ShadowQualityMedium,
            ShadowQualityHigh,
            ShadowQualitySoftLow,
            ShadowQualitySoftMedium,
            ShadowQualitySoftHigh,
        };

        virtual ~QAbstract3DGraph();
        void addInputHandler(QtDataVisualization::QAbstract3DInputHandler *inputHandler /Transfer/);
        void releaseInputHandler(QtDataVisualization::QAbstract3DInputHandler *inputHandler /TransferBack/);
        void setActiveInputHandler(QtDataVisualization::QAbstract3DInputHandler *inputHandler /Transfer/);
        QList<QtDataVisualization::QAbstract3DInputHandler *> inputHandlers() const;
        void addTheme(QtDataVisualization::Q3DTheme *theme /Transfer/);
        void releaseTheme(QtDataVisualization::Q3DTheme *theme /TransferBack/);
        void setActiveTheme(QtDataVisualization::Q3DTheme *theme /Transfer/);
        QtDataVisualization::Q3DTheme *activeTheme() const;
        QList<QtDataVisualization::Q3DTheme *> themes() const;
        void setSelectionMode(QtDataVisualization::QAbstract3DGraph::SelectionFlags mode);
        QtDataVisualization::QAbstract3DGraph::SelectionFlags selectionMode() const;
        void setShadowQuality(QtDataVisualization::QAbstract3DGraph::ShadowQuality quality);
        QtDataVisualization::QAbstract3DGraph::ShadowQuality shadowQuality() const;
        QtDataVisualization::Q3DScene *scene() const;
        void clearSelection();
        QtDataVisualization::QAbstract3DInputHandler *activeInputHandler() const;
        virtual bool shadowsSupported() const;

    signals:
        void activeInputHandlerChanged(QtDataVisualization::QAbstract3DInputHandler *inputHandler /ScopesStripped=1/);
        void activeThemeChanged(QtDataVisualization::Q3DTheme *theme /ScopesStripped=1/);
        void selectionModeChanged(QtDataVisualization::QAbstract3DGraph::SelectionFlags mode /ScopesStripped=1/);
        void shadowQualityChanged(QtDataVisualization::QAbstract3DGraph::ShadowQuality quality /ScopesStripped=1/);

    protected:
        virtual bool event(QEvent *event);
        virtual void resizeEvent(QResizeEvent *event);
        virtual void exposeEvent(QExposeEvent *event);
        virtual void mouseDoubleClickEvent(QMouseEvent *event);
        virtual void touchEvent(QTouchEvent *event);
        virtual void mousePressEvent(QMouseEvent *event);
        virtual void mouseReleaseEvent(QMouseEvent *event);
        virtual void mouseMoveEvent(QMouseEvent *event);
        virtual void wheelEvent(QWheelEvent *event);

    public:
%If (QtDataVisualization_1_1_0 -)

        enum ElementType
        {
            ElementNone,
            ElementSeries,
            ElementAxisXLabel,
            ElementAxisYLabel,
            ElementAxisZLabel,
            ElementCustomItem,
        };

%End
%If (QtDataVisualization_1_1_0 -)

        enum OptimizationHint
        {
            OptimizationDefault,
            OptimizationStatic,
        };

%End
%If (QtDataVisualization_1_1_0 -)
        typedef QFlags<QtDataVisualization::QAbstract3DGraph::OptimizationHint> OptimizationHints;
%End
%If (QtDataVisualization_1_1_0 -)
        int addCustomItem(QtDataVisualization::QCustom3DItem *item /Transfer/);
%End
%If (QtDataVisualization_1_1_0 -)
        void removeCustomItems();
%End
%If (QtDataVisualization_1_1_0 -)
        void removeCustomItem(QtDataVisualization::QCustom3DItem *item);
%End
%If (QtDataVisualization_1_1_0 -)
        void removeCustomItemAt(const QVector3D &position);
%End
%If (QtDataVisualization_1_1_0 -)
        void releaseCustomItem(QtDataVisualization::QCustom3DItem *item /TransferBack/);
%End
%If (QtDataVisualization_1_1_0 -)
        int selectedLabelIndex() const;
%End
%If (QtDataVisualization_1_1_0 -)
        QtDataVisualization::QAbstract3DAxis *selectedAxis() const;
%End
%If (QtDataVisualization_1_1_0 -)
        int selectedCustomItemIndex() const;
%End
%If (QtDataVisualization_1_1_0 -)
        QtDataVisualization::QCustom3DItem *selectedCustomItem() const;
%End
%If (QtDataVisualization_1_1_0 -)
        QImage renderToImage(int msaaSamples = 0, const QSize &imageSize = QSize());
%End
%If (QtDataVisualization_1_1_0 -)
        void setMeasureFps(bool enable);
%End
%If (QtDataVisualization_1_1_0 -)
        bool measureFps() const;
%End
%If (QtDataVisualization_1_1_0 -)
        qreal currentFps() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setOrthoProjection(bool enable);
%End
%If (QtDataVisualization_1_1_0 -)
        bool isOrthoProjection() const;
%End
%If (QtDataVisualization_1_1_0 -)
        QtDataVisualization::QAbstract3DGraph::ElementType selectedElement() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setAspectRatio(qreal ratio);
%End
%If (QtDataVisualization_1_1_0 -)
        qreal aspectRatio() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setOptimizationHints(QtDataVisualization::QAbstract3DGraph::OptimizationHints hints);
%End
%If (QtDataVisualization_1_1_0 -)
        QtDataVisualization::QAbstract3DGraph::OptimizationHints optimizationHints() const;
%End

    signals:
%If (QtDataVisualization_1_1_0 -)
        void selectedElementChanged(QtDataVisualization::QAbstract3DGraph::ElementType type /ScopesStripped=1/);
%End
%If (QtDataVisualization_1_1_0 -)
        void measureFpsChanged(bool enabled);
%End
%If (QtDataVisualization_1_1_0 -)
        void currentFpsChanged(qreal fps);
%End
%If (QtDataVisualization_1_1_0 -)
        void orthoProjectionChanged(bool enabled);
%End
%If (QtDataVisualization_1_1_0 -)
        void aspectRatioChanged(qreal ratio);
%End
%If (QtDataVisualization_1_1_0 -)
        void optimizationHintsChanged(QtDataVisualization::QAbstract3DGraph::OptimizationHints hints /ScopesStripped=1/);
%End

    public:
%If (QtDataVisualization_1_2_0 -)
        QList<QtDataVisualization::QCustom3DItem *> customItems() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setPolar(bool enable);
%End
%If (QtDataVisualization_1_2_0 -)
        bool isPolar() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setRadialLabelOffset(float offset);
%End
%If (QtDataVisualization_1_2_0 -)
        float radialLabelOffset() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setHorizontalAspectRatio(qreal ratio);
%End
%If (QtDataVisualization_1_2_0 -)
        qreal horizontalAspectRatio() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setReflection(bool enable);
%End
%If (QtDataVisualization_1_2_0 -)
        bool isReflection() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setReflectivity(qreal reflectivity);
%End
%If (QtDataVisualization_1_2_0 -)
        qreal reflectivity() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setLocale(const QLocale &locale);
%End
%If (QtDataVisualization_1_2_0 -)
        QLocale locale() const;
%End
%If (QtDataVisualization_1_2_0 -)
        QVector3D queriedGraphPosition() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setMargin(qreal margin);
%End
%If (QtDataVisualization_1_2_0 -)
        qreal margin() const;
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void polarChanged(bool enabled);
%End
%If (QtDataVisualization_1_2_0 -)
        void radialLabelOffsetChanged(float offset);
%End
%If (QtDataVisualization_1_2_0 -)
        void horizontalAspectRatioChanged(qreal ratio);
%End
%If (QtDataVisualization_1_2_0 -)
        void reflectionChanged(bool enabled);
%End
%If (QtDataVisualization_1_2_0 -)
        void reflectivityChanged(qreal reflectivity);
%End
%If (QtDataVisualization_1_2_0 -)
        void localeChanged(const QLocale &locale);
%End
%If (QtDataVisualization_1_2_0 -)
        void queriedGraphPositionChanged(const QVector3D &data);
%End
%If (QtDataVisualization_1_2_0 -)
        void marginChanged(qreal margin);
%End

    public:
%If (QtDataVisualization_5_7_0 -)
        bool hasContext() const;
%End
    };

    QFlags<QtDataVisualization::QAbstract3DGraph::SelectionFlag> operator|(QtDataVisualization::QAbstract3DGraph::SelectionFlag f1, QFlags<QtDataVisualization::QAbstract3DGraph::SelectionFlag> f2);
%If (QtDataVisualization_1_1_0 -)
    QFlags<QtDataVisualization::QAbstract3DGraph::OptimizationHint> operator|(QtDataVisualization::QAbstract3DGraph::OptimizationHint f1, QFlags<QtDataVisualization::QAbstract3DGraph::OptimizationHint> f2);
%End
};

// q3dcamera.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <q3dcamera.h>
%End

    class Q3DCamera : QtDataVisualization::Q3DObject
    {
%TypeHeaderCode
#include <q3dcamera.h>
%End

    public:
        enum CameraPreset
        {
            CameraPresetNone,
            CameraPresetFrontLow,
            CameraPresetFront,
            CameraPresetFrontHigh,
            CameraPresetLeftLow,
            CameraPresetLeft,
            CameraPresetLeftHigh,
            CameraPresetRightLow,
            CameraPresetRight,
            CameraPresetRightHigh,
            CameraPresetBehindLow,
            CameraPresetBehind,
            CameraPresetBehindHigh,
            CameraPresetIsometricLeft,
            CameraPresetIsometricLeftHigh,
            CameraPresetIsometricRight,
            CameraPresetIsometricRightHigh,
            CameraPresetDirectlyAbove,
            CameraPresetDirectlyAboveCW45,
            CameraPresetDirectlyAboveCCW45,
            CameraPresetFrontBelow,
            CameraPresetLeftBelow,
            CameraPresetRightBelow,
            CameraPresetBehindBelow,
            CameraPresetDirectlyBelow,
        };

%If (QtDataVisualization_5_7_0 -)
        explicit Q3DCamera(QObject *parent /TransferThis/ = 0);
%End
%If (- QtDataVisualization_5_7_0)
        Q3DCamera(QObject *parent /TransferThis/ = 0);
%End
        virtual ~Q3DCamera();
        float xRotation() const;
        void setXRotation(float rotation);
        float yRotation() const;
        void setYRotation(float rotation);
        bool wrapXRotation() const;
        void setWrapXRotation(bool isEnabled);
        bool wrapYRotation() const;
        void setWrapYRotation(bool isEnabled);
        virtual void copyValuesFrom(const QtDataVisualization::Q3DObject &source);
        QtDataVisualization::Q3DCamera::CameraPreset cameraPreset() const;
        void setCameraPreset(QtDataVisualization::Q3DCamera::CameraPreset preset);
        void setCameraPosition(float horizontal, float vertical, float zoom = 100.F);
        float zoomLevel() const;
        void setZoomLevel(float zoomLevel);

    signals:
        void xRotationChanged(float rotation);
        void yRotationChanged(float rotation);
        void zoomLevelChanged(float zoomLevel);
        void cameraPresetChanged(QtDataVisualization::Q3DCamera::CameraPreset preset /ScopesStripped=1/);
        void wrapXRotationChanged(bool isEnabled);
        void wrapYRotationChanged(bool isEnabled);

    public:
%If (QtDataVisualization_1_2_0 -)
        float minZoomLevel() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setMinZoomLevel(float zoomLevel);
%End
%If (QtDataVisualization_1_2_0 -)
        float maxZoomLevel() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setMaxZoomLevel(float zoomLevel);
%End
%If (QtDataVisualization_1_2_0 -)
        QVector3D target() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setTarget(const QVector3D &target);
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void minZoomLevelChanged(float zoomLevel);
%End
%If (QtDataVisualization_1_2_0 -)
        void maxZoomLevelChanged(float zoomLevel);
%End
%If (QtDataVisualization_1_2_0 -)
        void targetChanged(const QVector3D &target);
%End
    };
};

// qabstract3dseries.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qabstract3dseries.h>
%End

    class QAbstract3DSeries : QObject /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qabstract3dseries.h>
%End

    public:
        enum SeriesType
        {
            SeriesTypeNone,
            SeriesTypeBar,
            SeriesTypeScatter,
            SeriesTypeSurface,
        };

        enum Mesh
        {
            MeshUserDefined,
            MeshBar,
            MeshCube,
            MeshPyramid,
            MeshCone,
            MeshCylinder,
            MeshBevelBar,
            MeshBevelCube,
            MeshSphere,
            MeshMinimal,
            MeshArrow,
            MeshPoint,
        };

        virtual ~QAbstract3DSeries();
        QtDataVisualization::QAbstract3DSeries::SeriesType type() const;
        void setItemLabelFormat(const QString &format);
        QString itemLabelFormat() const;
        void setVisible(bool visible);
        bool isVisible() const;
        void setMesh(QtDataVisualization::QAbstract3DSeries::Mesh mesh);
        QtDataVisualization::QAbstract3DSeries::Mesh mesh() const;
        void setMeshSmooth(bool enable);
        bool isMeshSmooth() const;
        void setMeshRotation(const QQuaternion &rotation);
        QQuaternion meshRotation() const;
        void setUserDefinedMesh(const QString &fileName);
        QString userDefinedMesh() const;
        void setColorStyle(QtDataVisualization::Q3DTheme::ColorStyle style);
        QtDataVisualization::Q3DTheme::ColorStyle colorStyle() const;
        void setBaseColor(const QColor &color);
        QColor baseColor() const;
        void setBaseGradient(const QLinearGradient &gradient);
        QLinearGradient baseGradient() const;
        void setSingleHighlightColor(const QColor &color);
        QColor singleHighlightColor() const;
        void setSingleHighlightGradient(const QLinearGradient &gradient);
        QLinearGradient singleHighlightGradient() const;
        void setMultiHighlightColor(const QColor &color);
        QColor multiHighlightColor() const;
        void setMultiHighlightGradient(const QLinearGradient &gradient);
        QLinearGradient multiHighlightGradient() const;
        void setName(const QString &name);
        QString name() const;
        void setMeshAxisAndAngle(const QVector3D &axis, float angle);

    signals:
        void itemLabelFormatChanged(const QString &format);
        void visibilityChanged(bool visible);
        void meshChanged(QtDataVisualization::QAbstract3DSeries::Mesh mesh /ScopesStripped=1/);
        void meshSmoothChanged(bool enabled);
        void meshRotationChanged(const QQuaternion &rotation);
        void userDefinedMeshChanged(const QString &fileName);
        void colorStyleChanged(QtDataVisualization::Q3DTheme::ColorStyle style /ScopesStripped=1/);
        void baseColorChanged(const QColor &color);
        void baseGradientChanged(const QLinearGradient &gradient);
        void singleHighlightColorChanged(const QColor &color);
        void singleHighlightGradientChanged(const QLinearGradient &gradient);
        void multiHighlightColorChanged(const QColor &color);
        void multiHighlightGradientChanged(const QLinearGradient &gradient);
        void nameChanged(const QString &name);

    public:
%If (QtDataVisualization_1_1_0 -)
        QString itemLabel() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setItemLabelVisible(bool visible);
%End
%If (QtDataVisualization_1_1_0 -)
        bool isItemLabelVisible() const;
%End

    signals:
%If (QtDataVisualization_1_1_0 -)
        void itemLabelChanged(const QString &label);
%End
%If (QtDataVisualization_1_1_0 -)
        void itemLabelVisibilityChanged(bool visible);
%End
    };
};

// q3dbars.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <q3dbars.h>
%End

    class Q3DBars : QtDataVisualization::QAbstract3DGraph
    {
%TypeHeaderCode
#include <q3dbars.h>
%End

    public:
        Q3DBars(const QSurfaceFormat *format = 0, QWindow *parent /TransferThis/ = 0);
        virtual ~Q3DBars();
        void setPrimarySeries(QtDataVisualization::QBar3DSeries *series /Transfer/);
        QtDataVisualization::QBar3DSeries *primarySeries() const;
        void addSeries(QtDataVisualization::QBar3DSeries *series /Transfer/);
        void removeSeries(QtDataVisualization::QBar3DSeries *series /TransferBack/);
        void insertSeries(int index, QtDataVisualization::QBar3DSeries *series /Transfer/);
        QList<QtDataVisualization::QBar3DSeries *> seriesList() const;
        void setMultiSeriesUniform(bool uniform);
        bool isMultiSeriesUniform() const;
        void setBarThickness(float thicknessRatio);
        float barThickness() const;
        void setBarSpacing(const QSizeF &spacing);
        QSizeF barSpacing() const;
        void setBarSpacingRelative(bool relative);
        bool isBarSpacingRelative() const;
        void setRowAxis(QtDataVisualization::QCategory3DAxis *axis /Transfer/);
        QtDataVisualization::QCategory3DAxis *rowAxis() const;
        void setColumnAxis(QtDataVisualization::QCategory3DAxis *axis /Transfer/);
        QtDataVisualization::QCategory3DAxis *columnAxis() const;
        void setValueAxis(QtDataVisualization::QValue3DAxis *axis /Transfer/);
        QtDataVisualization::QValue3DAxis *valueAxis() const;
        void addAxis(QtDataVisualization::QAbstract3DAxis *axis /Transfer/);
        void releaseAxis(QtDataVisualization::QAbstract3DAxis *axis /TransferBack/);
        QList<QtDataVisualization::QAbstract3DAxis *> axes() const;
        QtDataVisualization::QBar3DSeries *selectedSeries() const;

    signals:
        void multiSeriesUniformChanged(bool uniform);
        void barThicknessChanged(float thicknessRatio);
        void barSpacingChanged(const QSizeF &spacing);
        void barSpacingRelativeChanged(bool relative);
        void rowAxisChanged(QtDataVisualization::QCategory3DAxis *axis /ScopesStripped=1/);
        void columnAxisChanged(QtDataVisualization::QCategory3DAxis *axis /ScopesStripped=1/);
        void valueAxisChanged(QtDataVisualization::QValue3DAxis *axis /ScopesStripped=1/);
        void primarySeriesChanged(QtDataVisualization::QBar3DSeries *series /ScopesStripped=1/);
        void selectedSeriesChanged(QtDataVisualization::QBar3DSeries *series /ScopesStripped=1/);

    public:
%If (QtDataVisualization_1_2_0 -)
        void setFloorLevel(float level);
%End
%If (QtDataVisualization_1_2_0 -)
        float floorLevel() const;
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void floorLevelChanged(float level);
%End
    };
};

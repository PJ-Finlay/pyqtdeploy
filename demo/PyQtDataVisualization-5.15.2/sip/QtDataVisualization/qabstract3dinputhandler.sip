// qabstract3dinputhandler.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qabstract3dinputhandler.h>
%End

    class QAbstract3DInputHandler : QObject
    {
%TypeHeaderCode
#include <qabstract3dinputhandler.h>
%End

    public:
        enum InputView
        {
            InputViewNone,
            InputViewOnPrimary,
            InputViewOnSecondary,
        };

        virtual ~QAbstract3DInputHandler();
        virtual void mouseDoubleClickEvent(QMouseEvent *event);
        virtual void touchEvent(QTouchEvent *event);
        virtual void mousePressEvent(QMouseEvent *event, const QPoint &mousePos);
        virtual void mouseReleaseEvent(QMouseEvent *event, const QPoint &mousePos);
        virtual void mouseMoveEvent(QMouseEvent *event, const QPoint &mousePos);
        virtual void wheelEvent(QWheelEvent *event);
        QtDataVisualization::QAbstract3DInputHandler::InputView inputView() const;
        void setInputView(QtDataVisualization::QAbstract3DInputHandler::InputView inputView);
        QPoint inputPosition() const;
        void setInputPosition(const QPoint &position);
        QtDataVisualization::Q3DScene *scene() const;
        void setScene(QtDataVisualization::Q3DScene *scene);

    signals:
        void positionChanged(const QPoint &position);
        void inputViewChanged(QtDataVisualization::QAbstract3DInputHandler::InputView view /ScopesStripped=1/);
        void sceneChanged(QtDataVisualization::Q3DScene *scene /ScopesStripped=1/);

    protected:
        explicit QAbstract3DInputHandler(QObject *parent /TransferThis/ = 0);
        void setPrevDistance(int distance);
        int prevDistance() const;
        void setPreviousInputPos(const QPoint &position);
        QPoint previousInputPos() const;
    };
};

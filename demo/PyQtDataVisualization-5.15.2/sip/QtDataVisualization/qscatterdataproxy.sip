// qscatterdataproxy.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qscatterdataproxy.h>
%End

    typedef QVector<QtDataVisualization::QScatterDataItem> QScatterDataArray;

    class QScatterDataProxy : QtDataVisualization::QAbstractDataProxy
    {
%TypeHeaderCode
#include <qscatterdataproxy.h>
%End

    public:
        explicit QScatterDataProxy(QObject *parent /TransferThis/ = 0);
        virtual ~QScatterDataProxy();
        int itemCount() const;
        const QtDataVisualization::QScatterDataArray *array() const;
        const QtDataVisualization::QScatterDataItem *itemAt(int index) const;
        void resetArray(QtDataVisualization::QScatterDataArray *newArray /Transfer/);
        void setItem(int index, const QtDataVisualization::QScatterDataItem &item);
        void setItems(int index, const QtDataVisualization::QScatterDataArray &items);
        int addItem(const QtDataVisualization::QScatterDataItem &item);
        int addItems(const QtDataVisualization::QScatterDataArray &items);
        void insertItem(int index, const QtDataVisualization::QScatterDataItem &item);
        void insertItems(int index, const QtDataVisualization::QScatterDataArray &items);
        void removeItems(int index, int removeCount);
        QtDataVisualization::QScatter3DSeries *series() const;

    signals:
        void arrayReset();
        void itemsAdded(int startIndex, int count);
        void itemsChanged(int startIndex, int count);
        void itemsRemoved(int startIndex, int count);
        void itemsInserted(int startIndex, int count);
        void itemCountChanged(int count);
        void seriesChanged(QtDataVisualization::QScatter3DSeries *series /ScopesStripped=1/);
    };
};

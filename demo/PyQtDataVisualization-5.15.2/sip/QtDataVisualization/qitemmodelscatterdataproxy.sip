// qitemmodelscatterdataproxy.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qitemmodelscatterdataproxy.h>
%End

    class QItemModelScatterDataProxy : QtDataVisualization::QScatterDataProxy
    {
%TypeHeaderCode
#include <qitemmodelscatterdataproxy.h>
%End

    public:
%If (QtDataVisualization_1_1_0 -)
        QItemModelScatterDataProxy(QAbstractItemModel *itemModel /KeepReference=120/, QObject *parent /TransferThis/ = 0);
%End
%If (- QtDataVisualization_1_1_0)
        QItemModelScatterDataProxy(const QAbstractItemModel *itemModel /KeepReference=120/, QObject *parent /TransferThis/ = 0);
%End
%If (QtDataVisualization_1_1_0 -)
        QItemModelScatterDataProxy(QAbstractItemModel *itemModel /KeepReference=120/, const QString &xPosRole, const QString &yPosRole, const QString &zPosRole, QObject *parent /TransferThis/ = 0);
%End
%If (- QtDataVisualization_1_1_0)
        QItemModelScatterDataProxy(const QAbstractItemModel *itemModel /KeepReference=120/, const QString &xPosRole, const QString &yPosRole, const QString &zPosRole, QObject *parent /TransferThis/ = 0);
%End
%If (QtDataVisualization_1_1_0 -)
        QItemModelScatterDataProxy(QAbstractItemModel *itemModel /KeepReference=120/, const QString &xPosRole, const QString &yPosRole, const QString &zPosRole, const QString &rotationRole, QObject *parent /TransferThis/ = 0);
%End
%If (- QtDataVisualization_1_1_0)
        QItemModelScatterDataProxy(const QAbstractItemModel *itemModel /KeepReference=120/, const QString &xPosRole, const QString &yPosRole, const QString &zPosRole, const QString &rotationRole, QObject *parent /TransferThis/ = 0);
%End
        explicit QItemModelScatterDataProxy(QObject *parent /TransferThis/ = 0);
        virtual ~QItemModelScatterDataProxy();
%If (QtDataVisualization_1_1_0 -)
        void setItemModel(QAbstractItemModel *itemModel /KeepReference=120/);
%End
%If (- QtDataVisualization_1_1_0)
        void setItemModel(const QAbstractItemModel *itemModel /KeepReference=120/);
%End
%If (QtDataVisualization_1_1_0 -)
        QAbstractItemModel *itemModel() const;
%End
%If (- QtDataVisualization_1_1_0)
        const QAbstractItemModel *itemModel() const;
%End
        void setXPosRole(const QString &role);
        QString xPosRole() const;
        void setYPosRole(const QString &role);
        QString yPosRole() const;
        void setZPosRole(const QString &role);
        QString zPosRole() const;
        void setRotationRole(const QString &role);
        QString rotationRole() const;
        void remap(const QString &xPosRole, const QString &yPosRole, const QString &zPosRole, const QString &rotationRole);

    signals:
        void itemModelChanged(const QAbstractItemModel *itemModel);
        void xPosRoleChanged(const QString &role);
        void yPosRoleChanged(const QString &role);
        void zPosRoleChanged(const QString &role);
        void rotationRoleChanged(const QString &role);

    public:
%If (QtDataVisualization_1_1_0 -)
        void setXPosRolePattern(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        QRegExp xPosRolePattern() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setYPosRolePattern(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        QRegExp yPosRolePattern() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setZPosRolePattern(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        QRegExp zPosRolePattern() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setRotationRolePattern(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        QRegExp rotationRolePattern() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setXPosRoleReplace(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        QString xPosRoleReplace() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setYPosRoleReplace(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        QString yPosRoleReplace() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setZPosRoleReplace(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        QString zPosRoleReplace() const;
%End
%If (QtDataVisualization_1_1_0 -)
        void setRotationRoleReplace(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        QString rotationRoleReplace() const;
%End

    signals:
%If (QtDataVisualization_1_1_0 -)
        void xPosRolePatternChanged(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        void yPosRolePatternChanged(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        void zPosRolePatternChanged(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        void rotationRolePatternChanged(const QRegExp &pattern);
%End
%If (QtDataVisualization_1_1_0 -)
        void rotationRoleReplaceChanged(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        void xPosRoleReplaceChanged(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        void yPosRoleReplaceChanged(const QString &replace);
%End
%If (QtDataVisualization_1_1_0 -)
        void zPosRoleReplaceChanged(const QString &replace);
%End
    };
};

// q3dscene.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <q3dscene.h>
%End

    class Q3DScene : QObject
    {
%TypeHeaderCode
#include <q3dscene.h>
%End

    public:
%If (QtDataVisualization_5_7_0 -)
        explicit Q3DScene(QObject *parent /TransferThis/ = 0);
%End
%If (- QtDataVisualization_5_7_0)
        Q3DScene(QObject *parent /TransferThis/ = 0);
%End
        virtual ~Q3DScene();
        QRect viewport() const;
        QRect primarySubViewport() const;
        void setPrimarySubViewport(const QRect &primarySubViewport);
        bool isPointInPrimarySubView(const QPoint &point);
        QRect secondarySubViewport() const;
        void setSecondarySubViewport(const QRect &secondarySubViewport);
        bool isPointInSecondarySubView(const QPoint &point);
        void setSelectionQueryPosition(const QPoint &point);
        QPoint selectionQueryPosition() const;
        static QPoint invalidSelectionPoint();
        void setSlicingActive(bool isSlicing);
        bool isSlicingActive() const;
        void setSecondarySubviewOnTop(bool isSecondaryOnTop);
        bool isSecondarySubviewOnTop() const;
        QtDataVisualization::Q3DCamera *activeCamera() const;
        void setActiveCamera(QtDataVisualization::Q3DCamera *camera /Transfer/);
        QtDataVisualization::Q3DLight *activeLight() const;
        void setActiveLight(QtDataVisualization::Q3DLight *light /Transfer/);
        float devicePixelRatio() const;
        void setDevicePixelRatio(float pixelRatio);

    signals:
        void viewportChanged(const QRect &viewport);
        void primarySubViewportChanged(const QRect &subViewport);
        void secondarySubViewportChanged(const QRect &subViewport);
        void secondarySubviewOnTopChanged(bool isSecondaryOnTop);
        void slicingActiveChanged(bool isSlicingActive);
        void activeCameraChanged(QtDataVisualization::Q3DCamera *camera /ScopesStripped=1/);
        void activeLightChanged(QtDataVisualization::Q3DLight *light /ScopesStripped=1/);
        void devicePixelRatioChanged(float pixelRatio);
        void selectionQueryPositionChanged(const QPoint &position);

    public:
%If (QtDataVisualization_1_2_0 -)
        void setGraphPositionQuery(const QPoint &point);
%End
%If (QtDataVisualization_1_2_0 -)
        QPoint graphPositionQuery() const;
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void graphPositionQueryChanged(const QPoint &position);
%End
    };
};

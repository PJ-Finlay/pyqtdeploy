// q3dscatter.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <q3dscatter.h>
%End

    class Q3DScatter : QtDataVisualization::QAbstract3DGraph
    {
%TypeHeaderCode
#include <q3dscatter.h>
%End

    public:
        Q3DScatter(const QSurfaceFormat *format = 0, QWindow *parent /TransferThis/ = 0);
        virtual ~Q3DScatter();
        void addSeries(QtDataVisualization::QScatter3DSeries *series /Transfer/);
        void removeSeries(QtDataVisualization::QScatter3DSeries *series /TransferBack/);
        QList<QtDataVisualization::QScatter3DSeries *> seriesList() const;
        void setAxisX(QtDataVisualization::QValue3DAxis *axis /Transfer/);
        QtDataVisualization::QValue3DAxis *axisX() const;
        void setAxisY(QtDataVisualization::QValue3DAxis *axis /Transfer/);
        QtDataVisualization::QValue3DAxis *axisY() const;
        void setAxisZ(QtDataVisualization::QValue3DAxis *axis /Transfer/);
        QtDataVisualization::QValue3DAxis *axisZ() const;
        void addAxis(QtDataVisualization::QValue3DAxis *axis /Transfer/);
        void releaseAxis(QtDataVisualization::QValue3DAxis *axis /TransferBack/);
        QList<QtDataVisualization::QValue3DAxis *> axes() const;
        QtDataVisualization::QScatter3DSeries *selectedSeries() const;

    signals:
        void axisXChanged(QtDataVisualization::QValue3DAxis *axis /ScopesStripped=1/);
        void axisYChanged(QtDataVisualization::QValue3DAxis *axis /ScopesStripped=1/);
        void axisZChanged(QtDataVisualization::QValue3DAxis *axis /ScopesStripped=1/);
        void selectedSeriesChanged(QtDataVisualization::QScatter3DSeries *series /ScopesStripped=1/);
    };
};

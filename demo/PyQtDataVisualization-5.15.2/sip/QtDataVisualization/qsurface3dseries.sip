// qsurface3dseries.sip generated by MetaSIP
//
// This file is part of the QtDataVisualization Python extension module.
//
// Copyright (c) 2020 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQtDataVisualization.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


namespace QtDataVisualization
{
%TypeHeaderCode
#include <qsurface3dseries.h>
%End

    class QSurface3DSeries : QtDataVisualization::QAbstract3DSeries
    {
%TypeHeaderCode
#include <qsurface3dseries.h>
%End

    public:
        enum DrawFlag
        {
            DrawWireframe,
            DrawSurface,
            DrawSurfaceAndWireframe,
        };

        typedef QFlags<QtDataVisualization::QSurface3DSeries::DrawFlag> DrawFlags;
        QSurface3DSeries(QtDataVisualization::QSurfaceDataProxy *dataProxy /Transfer/, QObject *parent /TransferThis/ = 0);
        explicit QSurface3DSeries(QObject *parent /TransferThis/ = 0);
        virtual ~QSurface3DSeries();
        void setDataProxy(QtDataVisualization::QSurfaceDataProxy *proxy /Transfer/);
        QtDataVisualization::QSurfaceDataProxy *dataProxy() const;
        void setSelectedPoint(const QPoint &position);
        QPoint selectedPoint() const;
        static QPoint invalidSelectionPosition();
        void setFlatShadingEnabled(bool enabled);
        bool isFlatShadingEnabled() const;
        void setDrawMode(QtDataVisualization::QSurface3DSeries::DrawFlags mode);
        QtDataVisualization::QSurface3DSeries::DrawFlags drawMode() const;
        bool isFlatShadingSupported() const;

    signals:
        void dataProxyChanged(QtDataVisualization::QSurfaceDataProxy *proxy /ScopesStripped=1/);
        void selectedPointChanged(const QPoint &position);
        void flatShadingEnabledChanged(bool enable);
        void flatShadingSupportedChanged(bool enable);
        void drawModeChanged(QtDataVisualization::QSurface3DSeries::DrawFlags mode /ScopesStripped=1/);

    public:
%If (QtDataVisualization_1_2_0 -)
        void setTexture(const QImage &texture);
%End
%If (QtDataVisualization_1_2_0 -)
        QImage texture() const;
%End
%If (QtDataVisualization_1_2_0 -)
        void setTextureFile(const QString &filename);
%End
%If (QtDataVisualization_1_2_0 -)
        QString textureFile() const;
%End

    signals:
%If (QtDataVisualization_1_2_0 -)
        void textureChanged(const QImage &image);
%End
%If (QtDataVisualization_1_2_0 -)
        void textureFileChanged(const QString &filename);
%End
    };
};
